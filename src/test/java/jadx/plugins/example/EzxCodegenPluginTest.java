package jadx.plugins.example;

import jadx.api.JadxArgs;
import jadx.api.JadxDecompiler;
import jadx.api.JavaClass;
import jadx.api.JavaMethod;
import jadx.api.JavaNode;
import jadx.core.dex.nodes.MethodNode;
import jadx.plugins.ezxcodegen.CodeGenerator;
import jadx.plugins.ezxcodegen.Comparator;
import jadx.plugins.ezxcodegen.CustomOptions;
import jadx.plugins.ezxcodegen.Utils;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.List;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

class EzxCodegenPluginTest {

	CustomOptions options = getDefaultOptions();

	private static CustomOptions getDefaultOptions() {
		CustomOptions options = new CustomOptions();
		try {
			Field enableField = CustomOptions.class.getDeclaredField("enable");
			enableField.setAccessible(true);
			enableField.set(options, true);

			Field methodAccessEnableField = CustomOptions.class.getDeclaredField("methodAccessEnable");
			methodAccessEnableField.setAccessible(true);
			methodAccessEnableField.set(options, false);

			Field methodReturnEnableField = CustomOptions.class.getDeclaredField("methodReturnEnable");
			methodReturnEnableField.setAccessible(true);
			methodReturnEnableField.set(options, false);

			Field classOptimizationEnableField = CustomOptions.class.getDeclaredField("classOptimizationEnable");
			classOptimizationEnableField.setAccessible(true);
			classOptimizationEnableField.set(options, true);

			Field debugEnableField = CustomOptions.class.getDeclaredField("debugEnable");
			debugEnableField.setAccessible(true);
			debugEnableField.set(options, true);
		} catch (NoSuchFieldException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return options;
	}


	@Test
	public void integrationTest() throws Exception {
		JadxArgs args = new JadxArgs();
		args.getInputFiles().add(getSampleFile("inner.smali"));
		try (JadxDecompiler jadx = new JadxDecompiler(args)) {
			jadx.load();
			JavaClass cls = jadx.getClasses().get(0);
			String clsCode = cls.getCode();
//			System.out.println(clsCode);
//			assertThat(clsCode).contains("Class generated by jadx decompiler");


			System.out.println("配置如下：\n" + options);
			JavaMethod jMth = cls.getMethods().get(2);

			CodeGenerator codeGenerator = new CodeGenerator(null, null, options);

			Method privateMethod = CodeGenerator.class.getDeclaredMethod("generateXposedSnippet", JavaNode.class);
			privateMethod.setAccessible(true);
			String snippet = (String) privateMethod.invoke(codeGenerator, jMth);
			System.out.println("生成的代码如下：\n" + snippet);
		}
	}

	public void test(JavaClass cls, JavaMethod jMth) {
		MethodNode mth = jMth.getMethodNode();
		List<MethodNode> sameMethodNodes = cls.getClassNode().getMethods().stream().filter(
				m -> m != jMth.getMethodNode() && m.getName().equals(mth.getName())
		).collect(Collectors.toList());

		System.out.println("本方法：");
		System.out.println(Utils.getMethodString(mth));
		System.out.println("其他方法：");
		sameMethodNodes.forEach(m -> System.out.println(Utils.getMethodString(m)));
		Comparator comparator = new Comparator(mth, sameMethodNodes, options);
		String result = comparator.searchUniqueModifier();
		System.out.println(result);

		String result2 = comparator.searchUniqueReturnType();
	}

	private File getSampleFile(String fileName) throws URISyntaxException {
		URL file = getClass().getClassLoader().getResource("samples/" + fileName);
		assertThat(file).isNotNull();
		return new File(file.toURI());
	}
}
